#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('exgen-station:server');
var http = require('http');
var https = require("https");
var fs = require("fs");
var config = require('../config/config');
const ngrok = require('ngrok');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4001');
app.set('port', port);

/**
 * Create HTTPS server.
 */
const llavePrivada = fs.readFileSync(config.privateKeyPath);
const certificado = fs.readFileSync(config.certificatePath);
const credenciales = {
    key: llavePrivada,
    cert: certificado,
    passphrase: config.passphrase
    };
var server = https.createServer(credenciales, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,() => {
  console.log('Server running on IP: https://localhost:' + port);
  console.log('Server running on IP: https://' + getIPAddress() + ':' + port);

});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

const getIPAddress = () => {
  const interfaces = require('os').networkInterfaces();
  let ip = '';
  for (const dev in interfaces) {
    const iface = interfaces[dev].filter(details => details.family === 'IPv4' && !details.internal);
    if (iface.length > 0) ip = iface[0].address;
  }
  return ip;
};

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
